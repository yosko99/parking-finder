generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String        @id @default(uuid())
    name          String
    email         String        @unique
    password      String
    isCompany     Boolean
    reservations  Reservation[]
    reviews       Review[]
    ownedParkings Parking[]
}

model Parking {
    id            String         @id @default(uuid())
    title         String
    description   String
    address       String
    hourlyPrice   Float
    lat           Float
    lng           Float
    parkingSize   Int
    reviews       Review[]
    reservations  Reservation[]
    owner         User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId       String
    parkingSpaces ParkingSpace[]
}

model Review {
    id        String  @id @default(uuid())
    rating    Int
    comment   String
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    parking   Parking @relation(fields: [parkingId], references: [id], onDelete: Cascade)
    parkingId String
}

model Reservation {
    id                 String       @id @default(uuid())
    registrationNumber String
    startTime          String
    endTime            String
    totalDuration      String
    user               User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId             String
    parking            Parking      @relation(fields: [parkingId], references: [id], onDelete: Cascade)
    parkingId          String
    parkingSpace       ParkingSpace @relation(fields: [parkingSpaceId], references: [id], onDelete: Cascade)
    parkingSpaceId     String
    isActive           Boolean      @default(true)
    country            String?
    totalPrice         Float
}

model ParkingSpace {
    id           String        @id @default(uuid())
    paths        Json
    parking      Parking       @relation(fields: [parkingId], references: [id], onDelete: Cascade)
    parkingId    String
    reservations Reservation[]
}
